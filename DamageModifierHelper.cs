using SandBox.Missions.MissionLogics.Arena;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated;

namespace DamageModifiers
{
	internal enum AgentType
	{
		Player = 0,
		Hero = 1,
		Other = 2,
	}

	internal static class DamageModifierHelper
	{
		internal static bool IsArenaFight(this List<MissionBehavior> missionBehaviors)
		{
			if (missionBehaviors != null)
			{
				for (int i = 0; i < missionBehaviors.Count; i++)
				{
					// Arena fights and Tournaments
					if (missionBehaviors[i] is ArenaAgentStateDeciderLogic)
						return true;
				}
			}
			return false;
		}

		internal static AgentType GetAgentType(this Agent agent)
		{
			agent = agent?.IsMount == true ? agent.RiderAgent : agent;

			if (agent != null)
			{
				if (!agent.IsAIControlled)
					return AgentType.Player;
				if (agent.Character?.IsHero == true)
					return AgentType.Hero;
			}
			return AgentType.Other;
		}

		internal static float GetDamageMultiplier(AgentType attackerType, AgentType victimType, bool isArenaFight)
		{
			switch (attackerType)
			{
				case AgentType.Player:
					switch (victimType)
					{
						case AgentType.Player:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaPlayerPlayer :
								DamageModifiers.Settings.BattlePlayerPlayer;
						case AgentType.Hero:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaPlayerHero :
								DamageModifiers.Settings.BattlePlayerHero;
						case AgentType.Other:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaPlayerOther :
								DamageModifiers.Settings.BattlePlayerOther;
					}
					break;
				case AgentType.Hero:
					switch (victimType)
					{
						case AgentType.Player:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaHeroPlayer :
								DamageModifiers.Settings.BattleHeroPlayer;
						case AgentType.Hero:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaHeroHero :
								DamageModifiers.Settings.BattleHeroHero;
						case AgentType.Other:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaHeroOther :
								DamageModifiers.Settings.BattleHeroOther;
					}
					break;
				case AgentType.Other:
					switch (victimType)
					{
						case AgentType.Player:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaOtherPlayer :
								DamageModifiers.Settings.BattleOtherPlayer;
						case AgentType.Hero:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaOtherHero :
								DamageModifiers.Settings.BattleOtherHero;
						case AgentType.Other:
							return isArenaFight ?
								DamageModifiers.Settings.ArenaOtherOther :
								DamageModifiers.Settings.BattleOtherOther;
					}
					break;
			}
			return 1f;
		}
	}
}
